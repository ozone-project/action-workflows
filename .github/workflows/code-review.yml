name: Code Review for PRs

on:
  workflow_call:
    inputs:
      ignore_patterns:
        description: 'Newline-separated list of file patterns to exclude from code review (e.g., "*.generated.ts\ndist/**\n*.min.js")'
        required: false
        type: string
        default: ''
    secrets:
      ANTHROPIC_API_KEY:
        required: true

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Claude Code SDK
        run: npm install -g @anthropic-ai/claude-code

      - name: Checkout ozone-ai prompts
        uses: actions/checkout@v4
        with:
          repository: ozone-project/ozone-ai
          ref: AI-23
          ssh-key: ${{ secrets.OZPR_GH_USER_SSH_PRIVATE_KEY }}
          path: ozone-ai-temp
          fetch-depth: 1

      - name: Copy code review prompt
        run: |
          mkdir -p code-review-prompts
          cp ozone-ai-temp/prompts/code-review.md ./code-review-prompts/code-review.md
          rm -rf ozone-ai-temp

      - name: Prepare context
        run: |
          # Generate exclude pathspec from ignore patterns
          PATHSPEC=""
          if [ -n "${{ inputs.ignore_patterns }}" ]; then
            echo "Processing ignore patterns..."
            echo "${{ inputs.ignore_patterns }}" > /tmp/ignore_patterns.txt
            while IFS= read -r pattern; do
              if [ -n "$pattern" ]; then
                echo "Excluding pattern: $pattern"
                PATHSPEC="$PATHSPEC ':!$pattern'"
              fi
            done < /tmp/ignore_patterns.txt
          fi
          
          # Get diff with pathspec exclusions
          if [ -n "$PATHSPEC" ]; then
            echo "Using pathspec exclusions: $PATHSPEC"
            PR_DIFF=$(git diff origin/${{ github.base_ref }}...HEAD -- . $PATHSPEC)
          else
            PR_DIFF=$(git diff origin/${{ github.base_ref }}...HEAD)
          fi
          
          # Get PR description and branch information
          BRANCH_NAME="${{ github.head_ref }}"
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Get PR description
            PR_DESCRIPTION=$(curl -s -H "Authorization: token ${{ github.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}" | \
              jq -r '.body // ""')
            
            # Get unresolved comments from reviews
            UNRESOLVED_COMMENTS=$(curl -s -H "Authorization: token ${{ github.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/reviews" | \
              jq -r '.[] | select(.state == "CHANGES_REQUESTED" or .state == "COMMENTED") | "Author: \(.user.login)\nComment: \(.body)\n---"' | \
              head -c 2000)
          else
            PR_DESCRIPTION=""
            UNRESOLVED_COMMENTS=""
          fi
          
          # Build complete context for Claude
          CONTEXT="Branch: $BRANCH_NAME\n\n"
          if [ -n "$PR_DESCRIPTION" ] && [ "$PR_DESCRIPTION" != "null" ]; then
            CONTEXT="${CONTEXT}PR Description:\n$PR_DESCRIPTION\n\n"
          fi
          if [ -n "$UNRESOLVED_COMMENTS" ] && [ "$UNRESOLVED_COMMENTS" != "" ]; then
            CONTEXT="${CONTEXT}Unresolved Comments:\n$UNRESOLVED_COMMENTS\n\n"
          fi
          CONTEXT="${CONTEXT}Code Changes:\n$PR_DIFF"
          
          # Prepare Claude system prompt
          SYSTEM_PROMPT=$(cat ./code-review-prompts/code-review.md)
          
          # Save to environment
          echo "SYSTEM_PROMPT<<EOF" >> $GITHUB_ENV
          echo "$SYSTEM_PROMPT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "PR_CONTEXT<<EOF" >> $GITHUB_ENV
          echo -e "$CONTEXT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Run Claude Code Review
        run: |
          claude --append-system-prompt "$SYSTEM_PROMPT" \
            --print "Conduct Code Review:\n\n$PR_CONTEXT" \
            > claude-review.md
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Comment PR with Claude Code Review
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: claude-code-review
          path: claude-review.md